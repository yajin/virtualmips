#labels Featured
#Current Development Status

= How to build and run VirtualMIPS =
-----
You need to download VirtualMIPS from sf.net. It includes the source code of VirtualMIPS and the linux 2.6.12 kernel for ADM5120.

VirtualMIPS needs libelf to read elf kernel image. Please install it before compiling VirtualMIPS. In debian/ubuntu, type the following command to install libelf.

{{{
sudo apt-get install libelf-dev
}}}


After installing libelf,you can compile VirtualMIPS.

{{{
tar -zxvf virtualmips-0.01.tar.gz
cd virtualmips-0.01/emulator
make
}}}



Currently, VirtualMIPS only supports ADM5120 Soc. Type the following command to run ADM5120 emulation.

{{{
./adm5120
}}}


{{{
VirtualMIPS (version 0.01)
Copyright (c) 2008 yajin.
Build date: Feb 27 2008 11:49:51

Using configure file: adm5120.conf
ram_size: 16M bytes
boot_method: ELF
flash_size: 4M bytes
flash_file_name: flash.bin
flash_phy_address: 0x1fc00000
kernel_file_name: vmlinux
Loading ELF file 'vmlinux'...
ELF entry point: 0x80214000

ADM5120 'adm5120': starting simulation (CPU0 PC=0x80214000), JIT disabled.
Linux version 2.6.12-rc1-mipscvs-20050403 (root@kill-bill) (gcc version 3.4.2) #4 Mon Feb 25 21:08:49 CST 2008
CPU revision is: 0001800b
ADM5120 board setup
System has no PCI BIOS
Determined physical RAM map:
 memory: 00d2c000 @ 002d4000 (usable)
Built 1 zonelists
Kernel command line:
Primary instruction cache 8kB, physically tagged, 2-way, linesize 32 bytes.
Primary data cache 8kB, 2-way, linesize 32 bytes.
Synthesized TLB refill handler (19 instructions).
Synthesized TLB load handler fastpath (31 instructions).
Synthesized TLB store handler fastpath (31 instructions).
Synthesized TLB modify handler fastpath (30 instructions).
PID hash table entries: 128 (order: 7, 2048 bytes)
CPU clock: 175MHz
Dentry cache hash table entries: 4096 (order: 2, 16384 bytes)
Inode-cache hash table entries: 2048 (order: 1, 8192 bytes)
Memory: 13312k/13488k available (1819k kernel code, 160k reserved, 297k data, 676k init, 0k ighmem)
Mount-cache hash table entries: 512
Checking for 'wait' instruction...  available.
NET: Registered protocol family 16
Initializing Cryptographic API
ADM5120 LED & GPIO driver
ttyS0 at I/O 0x12600000 (irq = 1) is a ADM5120
ttyS1 at I/O 0x12800000 (irq = 2) is a ADM5120
io scheduler noop registered
RAMDISK driver initialized: 16 RAM disks of 4096K size 1024 blocksize
ADM5120 board flash (0x200000 at 0x1fc00000)
ADM5120: Found 1 x16 devices at 0x0 in 16-bit bank
 Amd/Fujitsu Extended Query Table at 0x0040
number of CFI chips: 1
cfi_cmdset_0002: Disabling erase-suspend-program due to code brokenness.
NET: Registered protocol family 2
IP: routing cache hash table of 512 buckets, 4Kbytes
TCP established hash table entries: 1024 (order: 1, 8192 bytes)
TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
TCP: Hash tables configured (established 1024 bind 1024)
NET: Registered protocol family 17
Freeing unused kernel memory: 2099677k freed

Please press Enter to activate this console.
Algorithmics/MIPS FPU Emulator v1.5


BusyBox v1.00 (2008.02.22-15:41+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

/ #
}}}

= Build linux 2.6 kernel for ADM5120 =

Tom gives us [http://www.student.tue.nl/Q/t.f.a.wilms/adm5120/ an excellent article] of how to build linux 2.6 kernel for ADM5120. Just follow it. However, there are some mirror changes.

1. commit the switch core initiation code because VirtualMIPS does not emulate switch core of ADM5120.

{{{
drivers/net/adm5120sw.c.

Line501 //module_init(adm5120_sw_init);
Line502 //module_exit(adm5120_sw_exit);
}}}

2. When configuring the kernel, do NOT include USB Support.
{{{
    Device Drivers  --->
      USB support  --->       
         < > Support for Host-side USB
}}}

3. (Optional)Modify the prom_meminit function.
{{{

#define ADM5120_MEMCTRL_SDRAM1_MASK	0x20  
void __init prom_meminit(void)
{
	unsigned long base=CPHYSADDR(PFN_ALIGN(&_end));
	unsigned long size;

	u32 memctrl = *(u32*)KSEG1ADDR(ADM5120_MEMCTRL);
	size = adm_sdramsize[memctrl & ADM5120_MEMCTRL_SDRAM_MASK]; 
	if (memctrl & ADM5120_MEMCTRL_SDRAM1_MASK)                  //by yajin
		size *= 2;                                          //by yajin
	add_memory_region(base, size-base, BOOT_MEM_RAM);
}

}}}

= How to use the gdb interface =
Gdb is an useful tool for debugging kernel. VirtualMIPS has a gdb interface and you can debug your program without gdb stub in you program. To use gdb interface in VirtualMIPS, modify the configure file of VirtualMIPS(adm5120.conf for ADM5120 emulation for example).

{{{
#set to 1 to enable gdb debug
gdb_debug = 1
#the port for remote gdb connection
gdb_port = 5555
}}}
Run VirtualMIPS.
{{{
KILL-BILL:/home/root/develop/virtualmips/emulator# ./adm5120
VirtualMIPS (version 0.01)
Copyright (c) 2008 yajin.
Build date: Feb 27 2008 11:09:30

Using configure file: adm5120.conf
ram_size: 16M bytes
boot_method: ELF
flash_size: 4M bytes
flash_file_name: flash.bin
flash_phy_address: 0x1fc00000
kernel_file_name: vmlinux
GDB debug enable
GDB port: 5555
Loading ELF file 'vmlinux'...
ELF entry point: 0x80214000

ADM5120 'adm5120': starting simulation (CPU0 PC=0x80214000), JIT disabled.
Waiting for gdb on port 5555.
}}}

Open other terminal and connect to gdb on port 5555.

{{{
KILL-BILL:/home/root/develop/buildroot/linux# mipsel-linux-gdb
GNU gdb 6.3
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "--host=i386-pc-linux-gnu --target=mipsel-linux-uclibc".
(gdb) add-symbol-file vmlinux   
add symbol table from file "vmlinux" at
(y or n) y
Reading symbols from /home/root/develop/buildroot/linux/vmlinux...done.
(gdb) target remote localhost:5555    <-- connect to VirtualMIPS
Remote debugging using localhost:5555
0xffffffff80214000 in kernel_entry () at kernel/timer.c:1162
1162    }
(gdb) b start_kernel   <-- add a breakpoint at start_kernel
Breakpoint 1 at 0x802145e8: file init/main.c, line 434.
(gdb) c
Continuing.

Breakpoint 1, start_kernel () at init/main.c:434
434             printk(KERN_NOTICE);
(gdb)
}}}