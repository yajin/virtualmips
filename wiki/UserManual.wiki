#summary How to build and run VirtualMIPS
#labels Featured

= How to build VirtualMIPS =
-----
You need to download VirtualMIPS first. The latest version is v0.02 release candidate. 

Supported systems:
 * JZ [http://www.ingenic.cn/pfwebplus/productServ/kfyd/Hardware/pffaqQuestionContent.aspx?Category=2&Question=3 Pavo demo borad](without LCD controller).
 * ADM5120

VirtualMIPS needs libelf to read elf kernel image. Please install it before compiling VirtualMIPS. In debian/ubuntu, type the following command to install libelf.

{{{
sudo apt-get install libelf-dev
}}}


After installing libelf,you can compile VirtualMIPS.

{{{
tar -zxvf virtualmips-V0.02-RC1.tar.bz2
cd virtualmips-V0.02-RC1/run
make
}}}

If everything goes well, file 'adm5120' and 'pavo' will be created. 

There are some other files in direcotry virtualmips-V0.02-RC1/run.
 * adm5120.conf:configure file for adm5120 emulation
 * pavo.conf:configure file for pavo board emulation
 * u-boot-nand.bin: u-boot image for pavo board
 * vmlinux: linux 2.6.22 kernel and root file system for adm5120

= How to run pavo board emulation =

Pavo board has an 1GB nand flash where u-boot bootloader stored. In pavo emulation, we use cow(create on write) to emulate 1GB nand flash. That means the nand flash file will be created only after the block has been written. VirtualMIPS provides a tool mknandflash to create the nand flash file of u-boot.

{{{
cd virtualmips-V0.02-RC1/run
../tool/mknandflash -b u-boot-nand.bin
}}}

It will create a directory nandflash1GB containning nand flash file(One file one block).

{{{
cd virtualmips-V0.02-RC1/run
./pavo
}}}

{{{
NAND Secondary Program Loader

Starting U-Boot ...


U-Boot 1.1.6 (Mar 11 2008 - 12:35:08)

Board: Ingenic PAVO (CPU Speed 336 MHz)
DRAM:  64 MB
Flash:  0 kB
NAND:1024 MiB
*** Warning - bad CRC or NAND, using default environment

In:    serial
Out:   serial
Err:   serial
Hit any key to stop autoboot:  0
PAVO # help
?       - alias for 'help'
askenv  - get environment variables from stdin
autoscr - run script from memory
base    - print or set address offset
bdinfo  - print Board Info structure
boot    - boot default, i.e., run 'bootcmd'
bootd   - boot default, i.e., run 'bootcmd'
bootm   - boot application image from memory
bootp   - boot image via network using BootP/TFTP protocol
cmp     - memory compare
coninfo - print console devices and information
cp      - memory copy
cpm:     - Usage: cpmtest [add][cpm_value]
crc32   - checksum calculation
dhcp    - invoke DHCP client to obtain IP/boot params
echo    - echo args to console
erase   - erase FLASH memory
fatinfo - print information about filesystem
fatload - load binary file from a dos filesystem
fatls   - list files in a directory (default /)
flinfo  - print FLASH memory information
go      - start application at address 'addr'
help    - print online help
iminfo  - print header information for application image
imls    - list all images found in flash
itest   - return true/false on integer compare
loadb   - load binary file over serial line (kermit mode)
loads   - load S-Record file over serial line
loady   - load binary file over serial line (ymodem mode)
loop    - infinite loop on address range
md      - memory display
mm      - memory modify (auto-incrementing)
mmcinit - init mmc card
mtest   - simple RAM test
mw      - memory write (fill)
nand    - NAND sub-system
nboot   - boot from NAND device
nfs     - boot image via network using NFS protocol
nm      - memory modify (constant address)
ping    - send ICMP ECHO_REQUEST to network host
printenv- print environment variables
protect - enable or disable FLASH write protection
rarpboot- boot image via network using RARP/TFTP protocol
reset   - Perform RESET of the CPU
run     - run commands in an environment variable
saveenv - save environment variables to persistent storage
setenv  - set environment variables
sleep   - delay execution for some time
tftpboot- boot image via network using TFTP protocol
version - print monitor version
PAVO #

}}}

= How to run adm5120 emulation =

Type the following command to run ADM5120 emulation.

{{{
cd virtualmips-V0.02-RC1/run
./adm5120
}}}


{{{
VirtualMIPS (version 0.01)
Copyright (c) 2008 yajin.
Build date: Feb 27 2008 11:49:51

Using configure file: adm5120.conf
ram_size: 16M bytes
boot_method: ELF
flash_size: 4M bytes
flash_file_name: flash.bin
flash_phy_address: 0x1fc00000
kernel_file_name: vmlinux
Loading ELF file 'vmlinux'...
ELF entry point: 0x80214000

ADM5120 'adm5120': starting simulation (CPU0 PC=0x80214000), JIT disabled.
Linux version 2.6.12-rc1-mipscvs-20050403 (root@kill-bill) (gcc version 3.4.2) #4 Mon Feb 25 21:08:49 CST 2008
CPU revision is: 0001800b
ADM5120 board setup
System has no PCI BIOS
Determined physical RAM map:
 memory: 00d2c000 @ 002d4000 (usable)
Built 1 zonelists
Kernel command line:
Primary instruction cache 8kB, physically tagged, 2-way, linesize 32 bytes.
Primary data cache 8kB, 2-way, linesize 32 bytes.
Synthesized TLB refill handler (19 instructions).
Synthesized TLB load handler fastpath (31 instructions).
Synthesized TLB store handler fastpath (31 instructions).
Synthesized TLB modify handler fastpath (30 instructions).
PID hash table entries: 128 (order: 7, 2048 bytes)
CPU clock: 175MHz
Dentry cache hash table entries: 4096 (order: 2, 16384 bytes)
Inode-cache hash table entries: 2048 (order: 1, 8192 bytes)
Memory: 13312k/13488k available (1819k kernel code, 160k reserved, 297k data, 676k init, 0k ighmem)
Mount-cache hash table entries: 512
Checking for 'wait' instruction...  available.
NET: Registered protocol family 16
Initializing Cryptographic API
ADM5120 LED & GPIO driver
ttyS0 at I/O 0x12600000 (irq = 1) is a ADM5120
ttyS1 at I/O 0x12800000 (irq = 2) is a ADM5120
io scheduler noop registered
RAMDISK driver initialized: 16 RAM disks of 4096K size 1024 blocksize
ADM5120 board flash (0x200000 at 0x1fc00000)
ADM5120: Found 1 x16 devices at 0x0 in 16-bit bank
 Amd/Fujitsu Extended Query Table at 0x0040
number of CFI chips: 1
cfi_cmdset_0002: Disabling erase-suspend-program due to code brokenness.
NET: Registered protocol family 2
IP: routing cache hash table of 512 buckets, 4Kbytes
TCP established hash table entries: 1024 (order: 1, 8192 bytes)
TCP bind hash table entries: 1024 (order: 0, 4096 bytes)
TCP: Hash tables configured (established 1024 bind 1024)
NET: Registered protocol family 17
Freeing unused kernel memory: 2099677k freed

Please press Enter to activate this console.
Algorithmics/MIPS FPU Emulator v1.5


BusyBox v1.00 (2008.02.22-15:41+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

/ #
}}}

= Links =
 * [KernelForADM5120 Build linux kernel for ADM5120]
 * [gdbinterface how to use gdb to debug kernel]