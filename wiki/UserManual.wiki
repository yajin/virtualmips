#summary How to build VirtualMIPS

You need to download VirtualMIPS first. The [http://virtualmips.googlecode.com/files/virtualmips-0.04.tar.bz2 latest version] is v0.04. 

Supported systems:
 * JZ [http://www.ingenic.cn/pfwebplus/productServ/kfyd/Hardware/pffaqQuestionContent.aspx?Category=2&Question=3 Pavo demo borad](without LCD controller).
 * ADM5120
 
= Library dependence =

Library dependence:
	* libelf
	* libconfuse
	* libSDL

 * Debian etch
{{{
sudo apt-get install libelf-dev
sudo apt-get install libconfuse-dev
sudo apt-get install  libsdl1.2debian
}}}

  * Archlinux
{{{
sudo pacman -S libelf
sudo pacman -S confuse
sudo pacman -S libsdl
}}}

You can build libconfuse by yourself. Download the source code of libconfuse from http://bzero.se/confuse/confuse-2.6.tar.gz.

{{{
tar zxvf confuse-2.6.tar.gz 
cd confuse-2.6
./configure
make 
sudo make install
}}}

= Build VirtualMIPS =

Build VirtualMIPS is very easy. Since version 0.04 VirtualMIPS uses [http://www.scons.org scons] to build the system instead of make. Install scons in your system first.

 * Debian etch
{{{
sudo apt-get install scons
}}}


{{{
tar -jxvf virtualmips-0.04.tar.bz2
cd virtualmips-0.04/build
}}}

Use scons-h to see the build options of VirtualMIPS. 
{{{
# scons -h

Usage:
        scons [target] [compile options]
Targets:
        adm5120:                Build VirtualMIPS for adm5120 emulation
        pavo:                   Build VirtualMIPS for pavo emulation
        mknandflash:            Build mknandflash tool for VirtualMIPS

Compile Options:
        debug:                  Set to 1 to compile with debug. Default 0.
        lcd:                    Set to 1 to compile VirtualMIPS with LCD support(pavo only). Default 0.

}}}

Type "scons pavo lcd=1" to build VirtualMIPS for pavo emulation *with* LCD support.
Type "scons pavo lcd=0" to build VirtualMIPS for pavo emulation *without* LCD support.
Type "scons adm5120" to build VirtualMIPS for adm5120 emulation.
Type "scons mknandflash" to build mknandflash tool.

If everything goes well, file 'adm5120'/'pavo'/mknandflash will be created in virtualmips-0.04/build.



You need to download the [http://virtualmips.googlecode.com/files/test_suit-0.03.tar.bz2 test suit] to run VirtualMIPS.

{{{
tar -jxvf test_suit-0.03.tar.bz2
cd test_suit-0.03
}}}

There are several files in direcotry test_suit-0.02.
 * u-boot-nand.bin: u-boot image for pavo board
 * uImage: linux 2.6.24 kernel image for pavo(u-boot image)
 * config.linux2.6.24.pavo: linux 2.6.24 config for pavo
 * vmlinux-adm5120: linux 2.6.22 kernel and root file system for adm5120
 * run.bin: linux 2.6.22 kernel image and boot loader for adm5120


= How to run pavo board emulation =

Pavo board has an 1GB nand flash where u-boot bootloader/linux kernel/rootfs stored. In pavo emulation, we use cow(create on write) method to emulate 1GB nand flash. That means the nand flash file will be created only after the block has been written. VirtualMIPS provides a tool mknandflash to create the nand flash file. Before using mknandflash, you need to build u-boot and linux kernel and root file system. U-boot image and kernel image for pavo are included in test_suit-0.02. Root file system is too big so it is not included in test suit. You can [ftp://ftp.ingenic.cn/3sw/01linux/03root/rootfs-20080226.tgz download it] form JZ's website.

{{{
tar zxvf rootfs-20080226.tgz
cd rootfs-20080226
mkyaffs2image 1 root26 root.yaffs2
}}}

It will create the yaffs2 root file system root.yaffs2. Copy it to VirtualMIPS directory.

{{{
cp rootfs-20080226/root.yaffs2  virtualmips-0.03/run
}}}

Copy the other files from test_suit to VirtualMIPS directory.

{{{
cp test_suit-0.03/*  virtualmips-0.03/run
}}}

VirtualMIPS provides a tool "mknandflash" to create the nand flash file(Source code is  virtualmips-0.03/tool/mknandflash.c). Make sure you have setten the right u-boot/kernel image file name and root filesytem file name/startaddress in the configure file of mknandflash(nandflash.conf in directory virtualmips-0.03/run).See nandflash.conf for more information.

{{{
cd virtualmips-0.03/run
../tool/mknandflash 
}}}

It will create a directory nandflash1GB containning nand flash file(One file one block).

Since version 0.03, VirtualMIPS supports network card(cs8900a) emulation. Before using network card emulation, you need to create a tap device first.

{{{
tunctl
}}}

It will create a tap device 'tap0'.
{{{
[root@kill-bill /]# tunctl 
Set 'tap0' persistent and owned by uid 0
}}}

If tunctl command is not found in your computer, please install uml_utilities first.

* Debian/Ubuntu
{{{
sudo apt-get install uml-utilities
}}}

* Archlinux
{{{
sudo pacman -S user-mode-linux
sudo pacman -S uml_utilities
modprobe tun
}}}

Change the pavo.conf in virtualmips-0.03/run to enable network card emulation.

{{{
cs8900_enable = 1
cs8900_iotype = "tap:tap0"  <- tap name can be changed according to your system. 
}}}

Read [pavonetwork this document] for how to use network in VirtualMIPS.

{{{
cd virtualmips-0.03/run
./pavo
}}}

{{{
VirtualMIPS (version 0.03)
Copyright (c) 2008 yajin.
Build date: Apr  1 2008 22:27:17

Using configure file: pavo.conf
ram_size: 64M bytes 
boot_method: Binary 
flash_type: NAND FLASH 
flash_size: 1024M bytes 
boot_from: NAND FLASH 
CS8900 net card enabled
CS8900 iotype tap:tap0 

loaded 480 nand flash file from directory "nandflash1GB". 
VM 'pavo': starting simulation (CPU0 PC=0x80000004), JIT disabled.


NAND Secondary Program Loader

Starting U-Boot ...


U-Boot 1.1.6 (Mar 11 2008 - 12:35:08)

Board: Ingenic PAVO (CPU Speed 336 MHz)
DRAM:  64 MB
Flash:  0 kB
NAND:1024 MiB
*** Warning - bad CRC or NAND, using default environment

In:    serial
Out:   serial
Err:   serial
Hit any key to stop autoboot:  0 

NAND read: device 0 offset 0x400000, size 0x300000
 3145728 bytes read: OK
## Booting image at 80600000 ...
   Image Name:   Linux-2.6.24.3
   Image Type:   MIPS Linux Kernel Image (gzip compressed)
   Data Size:    1878740 Bytes =  1.8 MB
   Load Address: 80010000
   Entry Point:  8031c390
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK

Starting kernel ...

Linux version 2.6.24.3 (root@KILL-BILL) (gcc version 4.1.2) #45 PREEMPT Tue Apr 1 09:28:50 CST 2008
CPU revision is: 0ad0024f (Ingenic JZRISC)
CPU clock: 336MHz, System clock: 112MHz, Peripheral clock: 112MHz, Memory clock: 112MHz
JZ4740 PAVO board setup
Determined physical RAM map:
 memory: 04000000 @ 00000000 (usable)
User-defined physical RAM map:
 memory: 04000000 @ 00000000 (usable)
Zone PFN ranges:
  Normal          0 ->    16384
Movable zone start PFN for each node
early_node_map[1] active PFN ranges
    0:        0 ->    16384
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 16256
Kernel command line: mem=64M console=ttyS0,57600n8 ip=off rootfstype=yaffs2 root=/dev/mtdblock2 rw
Primary instruction cache 16kB, VIPT, 4-way, linesize 32 bytes.
Primary data cache 16kB, 4-way, VIPT, no aliases, linesize 32 bytes
Synthesized clear page handler (25 instructions).
Synthesized copy page handler (44 instructions).
Synthesized TLB refill handler (20 instructions).
Synthesized TLB load handler fastpath (32 instructions).
Synthesized TLB store handler fastpath (32 instructions).
Synthesized TLB modify handler fastpath (31 instructions).
PID hash table entries: 256 (order: 8, 1024 bytes)
Console: colour dummy device 80x25
console [ttyS0] enabled
Dentry cache hash table entries: 8192 (order: 3, 32768 bytes)
Inode-cache hash table entries: 4096 (order: 2, 16384 bytes)
Memory: 60464k/65536k available (3144k kernel code, 4996k reserved, 923k data, 168k init, 0k highmem)
Mount-cache hash table entries: 512
net_namespace: 64 bytes
NET: Registered protocol family 16
SCSI subsystem initialized
NET: Registered protocol family 2
IP route cache hash table entries: 1024 (order: 0, 4096 bytes)
TCP established hash table entries: 2048 (order: 2, 16384 bytes)
TCP bind hash table entries: 2048 (order: 1, 8192 bytes)
TCP: Hash tables configured (established 2048 bind 2048)
TCP reno registered
Total 4MB memory at 0x3400000 was reserved for IPU
Power Management for JZ
yaffs Mar 20 2008 09:26:40 Installing. 
io scheduler noop registered
io scheduler anticipatory registered (default)
io scheduler deadline registered
io scheduler cfq registered
JzSOC: char device family.
JZ UDC hotplug driver installed
Serial: 8250/16550 driver $Revision: 1.2 $ 2 ports, IRQ sharing disabled
UDC starting monitor thread
serial8250: ttyS0 at MMIO 0x0 (irq = 9) is a 16450
serial8250: ttyS1 at MMIO 0x0 (irq = 8) is a 16450
RAMDISK driver initialized: 16 RAM disks of 4096K size 1024 blocksize
loop: module loaded
Jz CS8900A driver for Linux (V0.02)
eth%d: CS8900A rev ; detected
Linux video capture interface: v2.00
JzSOC Camera Interface Module (CIM) driver registered
Ingenic CMOS camera sensor driver registered
Driver 'sd' needs updating - please use bus_type methods
block2mtd: version $Revision: 1.30 $
NAND device: Manufacturer ID: 0xec, Chip ID: 0xd3 (Samsung NAND 1GiB 3,3V 8-bit)
Scanning device for bad blocks
Creating 6 MTD partitions on "NAND 1GiB 3,3V 8-bit":
0x00000000-0x00400000 : "NAND BOOT partition"
0x00400000-0x00800000 : "NAND KERNEL partition"
0x00800000-0x08000000 : "NAND ROOTFS partition"
0x08000000-0x10000000 : "NAND DATA1 partition"
0x10000000-0x20000000 : "NAND DATA2 partition"
0x20000000-0x40000000 : "NAND VFAT partition"
mice: PS/2 mouse device common for all mice
JzSOC Watchdog Timer: timer margin 60 sec
Advanced Linux Sound Architecture Driver Version 1.0.15 (Tue Nov 20 19:16:42 2007 UTC).
ASoC version 0.13.1
ALSA device list:
  No soundcards found.
TCP cubic registered
NET: Registered protocol family 1
NET: Registered protocol family 17
RPC: Registered udp transport module.
RPC: Registered tcp transport module.
yaffs: dev is 32505858 name is "mtdblock2"
yaffs: Attempting MTD mount on 31.2, "mtdblock2"
VFS: Mounted root (yaffs2 filesystem).
Freeing unused kernel memory: 168k freed
Algorithmics/MIPS FPU Emulator v1.5
init started: BusyBox v1.8.2 (2008-01-09 19:22:01 CST)
starting pid 720, tty '': '/etc/init.d/rcS'
Starting udevd ...
starting pid 757, tty '': '/bin/sh'
# uptime
 00:00:18 up 0 min, load average: 0.14, 0.03, 0.00
# cat /proc/cpuinfo 
system type		: JZ4740
processor		: 0
cpu model		: Ingenic JZRISC V4.15
BogoMIPS		: 6.54
wait instruction	: yes
microsecond timers	: no
tlb_entries		: 32
extra interrupt vector	: yes
hardware watchpoint	: no
ASEs implemented	:
shadow register sets	: 1
VCED exceptions		: not available
VCEI exceptions		: not available

# 


}}}



= How to stop emulation =

press *CTRL+\* to stop emulation. CTRL+C is sent to guest.

= Links =
 * [KernelForADM5120 Build linux kernel for ADM5120]
 * [gdbinterface how to use gdb to debug kernel]
 * [ubootForPavo  How to build u-boot for pavo borad]
 * [linuxkernelForPavo  How to build linux kernel for pavo borad]
 * [pavonetwork How to use network in pavo emulation]